// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

import "forge-std/Test.sol";
import "forge-std/console.sol";
import "~/flashloan/UniswapV3Flash.sol";
import "~/flashloan/TokenAddresses.sol";

// WARNING: Pools state needs to be forked from mainnet, make sure to include fork-url when running this test.
contract UniswapV3FlashTest is Test, TokenAddresses {
  uint24 constant POOL_FEE = 500; // 1e4 corresponds to 1%.

  IWETH private weth = IWETH(WETH);

  UniswapV3Flash private uniswapInstance;

  function setUp() public {
    uniswapInstance = new UniswapV3Flash(USDC, WETH, POOL_FEE);
  }

  function testFlash() public {
    // Approve WETH fee
    weth.deposit{ value: 1 ether }();
    weth.approve(address(uniswapInstance), 1 ether);

    uint256 balBefore = weth.balanceOf(address(this));
    uint256 borrowAmount = 100 ether;
    uniswapInstance.flash(0, borrowAmount);
    uint256 balAfter = weth.balanceOf(address(this));

    uint256 fee = balBefore - balAfter;
    assertEq(fee, (borrowAmount * 500) / 1e6);
    console.log("WETH fee %s finney (0.05%)", fee / (1e6 gwei));
  }
}
