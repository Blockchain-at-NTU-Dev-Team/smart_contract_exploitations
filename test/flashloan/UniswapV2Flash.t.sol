// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

import "forge-std/Test.sol";
import "forge-std/console.sol";
import "~/flashloan/UniswapV2Flash.sol";
import "~/flashloan/TokenAddresses.sol";

// WARNING: Pools state needs to be forked from mainnet, make sure to include fork-url when running this test.
contract UniswapV2FlashSwapTest is Test, TokenAddresses {
  IWETH private weth = IWETH(WETH);

  UniswapV2FlashSwap private uniswapInstance = new UniswapV2FlashSwap(WBTC, WETH);

  function setUp() public {}

  function testFlashSwap() public {
    weth.deposit{ value: 1 ether }();
    weth.approve(address(uniswapInstance), 1 ether);

    uint256 balanceBefore = weth.balanceOf(address(this));
    uint256 borrowAmount = 100 ether; 
    uniswapInstance.flashSwap(borrowAmount);
    uint256 balAfter = weth.balanceOf(address(this));

    uint256 fee = balanceBefore - balAfter;
    assertEq(fee, borrowAmount * 3 / 997 + 1);
    console.log("WETH fee %s finney (0.05%)", fee / (1e6 gwei));
  }
}
