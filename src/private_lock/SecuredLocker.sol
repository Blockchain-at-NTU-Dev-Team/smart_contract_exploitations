// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

import "@openzeppelin/contracts/utils/cryptography/ECDSA.sol";

contract SecureLocker {
  bool public locked = true; // 1 bytes
  address private owner;
  using ECDSA for bytes32;

  constructor(address _owner) {
    owner = _owner;
  }

  function unlock(bytes memory _signature) public {
    // EIP 712 Signature Validation: https://eips.ethereum.org/EIPS/eip-712
    bytes memory eth_msg = abi.encodePacked("\x19Ethereum Signed Message:\n20", "<SECRET_OFFCHAIN_MSG>");
    bytes32 hash = keccak256(eth_msg);
    if (owner == hash.recover(_signature)) {
      locked = false;
    }
  }
}
